import { V14, V15 } from '@polkadot-api/substrate-bindings';
import { getChecksumBuilder } from '@polkadot-api/metadata-builders';

type MetadataPrimitives = "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
declare const primitiveTypes: Record<MetadataPrimitives | "compactNumber" | "compactBn", string>;
interface Variable {
    name: string;
    checksum: string;
    type: string;
}
interface CodeDeclarations {
    imports: Set<string>;
    variables: Map<string, Variable>;
    takenNames: Set<string>;
}
declare const defaultDeclarations: () => CodeDeclarations;
interface TypeForEntry {
    type: string;
    import?: "globalTypes" | "client";
}
declare const getTypesBuilder: (declarations: CodeDeclarations, metadata: V14 | V15, knownTypes: Record<string, string>) => {
    buildTypeDefinition: (id: number) => string;
    buildDefinition: (id: number) => TypeForEntry;
    buildStorage: (pallet: string, entry: string) => {
        key: string;
        val: string;
    };
    buildEvent: (pallet: string, name: string) => string;
    buildError: (pallet: string, name: string) => string;
    buildCall: (pallet: string, name: string) => string;
    buildRuntimeCall: (api: string, method: string) => {
        args: string;
        value: string;
    };
    buildConstant: (pallet: string, constantName: string) => string;
    getTypeFileImports: () => string[];
    getClientFileImports: () => string[];
};

type KnownTypes = Record<string, string>;
type RepositoryEntry = string | {
    name: string;
    paths?: string[];
    type?: string;
    chains?: string;
};
declare const knownTypesRepository: Record<string, RepositoryEntry>;

type ArraVal<T extends Array<any>> = T extends Array<infer V> ? V : unknown;
declare const getNewTypes: (metadata: V14 | V15, knownTypes: KnownTypes, getTypeName: (data: ArraVal<V15["lookup"]>) => string | null) => {
    [k: string]: {
        name: string;
        checksum: string;
        type: string;
        path: string[];
    };
};

type DescriptorValues = Record<"storage" | "tx" | "events" | "errors" | "constants" | "apis", Record<string, Record<string, number>>>;
declare const generateDescriptors: (metadata: V14 | V15, checksums: string[], typesBuilder: ReturnType<typeof getTypesBuilder>, checksumBuilder: ReturnType<typeof getChecksumBuilder>, prefix: string, paths: {
    client: string;
    checksums: string;
    types: string;
    descriptorValues: string;
}) => {
    descriptorTypes: string;
    descriptorValues: DescriptorValues;
};

declare const generateMultipleDescriptors: (chains: Array<{
    key: string;
    metadata: V14 | V15;
    knownTypes: KnownTypes;
}>, paths: {
    client: string;
    checksums: string;
    types: string;
    descriptorValues: string;
}, options?: {
    whitelist?: string[];
}) => {
    descriptorsFileContent: string;
    descriptorTypesFileContent: string[];
    checksums: string[];
    typesFileContent: string;
    publicTypes: string[];
};

export { type CodeDeclarations, type DescriptorValues, type Variable, defaultDeclarations, generateDescriptors, generateMultipleDescriptors, getNewTypes, getTypesBuilder, knownTypesRepository, primitiveTypes };
