{"version":3,"sources":["../src/queue.ts","../src/types.ts","../src/logs-provider.ts","../src/with-logs-recorder.ts"],"sourcesContent":["interface QueueNode<T> {\n  value: T\n  next?: QueueNode<T>\n}\n\nexport default class Queue<T> {\n  private first?: QueueNode<T>\n  private last?: QueueNode<T>\n\n  constructor(...vals: T[]) {\n    if (vals.length === 0) return\n    vals.forEach((val) => this.push(val))\n  }\n\n  push(value: T) {\n    const nextLast: QueueNode<T> = { value }\n    if (this.last === undefined) {\n      this.last = nextLast\n      this.first = this.last\n    } else {\n      this.last.next = nextLast\n      this.last = nextLast\n    }\n  }\n\n  pop() {\n    const result = this.first?.value\n    if (this.first) {\n      this.first = this.first.next\n      if (!this.first) {\n        this.last = undefined\n      }\n    }\n    return result\n  }\n\n  peek() {\n    return this.first?.value\n  }\n}\n","export type Out = \">>\"\nexport const OUT: Out = \">>\"\n\nexport type In = \"<<\"\nexport const IN: In = \"<<\"\n","import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport Queue from \"./queue\"\nimport { In, OUT, Out } from \"./types\"\n\ninterface Log {\n  clientId: number\n  type: In | Out\n  msg: string\n  tick: number\n}\n\nconst rawLogsToLogs = (rawLogs: string[]): Map<number, Log[]> => {\n  const result = new Map<number, Log[]>()\n  let prevDate = \"\"\n  let tick = -1\n\n  for (let i = 0; i < rawLogs.length; i++) {\n    const [, clientIdRaw, dateRaw, type, msg] = rawLogs[i].match(\n      /^(\\d*)-(.{24})-(.{2})-(.*)$/,\n    )!\n    const clientId = Number(clientIdRaw)\n\n    tick += dateRaw === prevDate ? 0 : 1\n    prevDate = dateRaw\n\n    const logs = result.get(clientId) ?? []\n    result.set(clientId, logs)\n\n    logs.push({\n      clientId,\n      tick,\n      type: type as any,\n      msg,\n    })\n  }\n\n  return result\n}\n\nconst extractTx = (msg: string) => {\n  const startTxt = 'TaggedTransactionQueue_validate_transaction\",\"'\n  const start = msg.lastIndexOf(startTxt) + startTxt.length + 4\n  const end = msg.indexOf(`\"`, start + 1)\n  return msg.substring(start, end - 64)\n}\n\nexport const logsProvider = (rawLogs: Array<string>): JsonRpcProvider => {\n  let nextClientId = 1\n  const allLogs = rawLogsToLogs(\n    rawLogs[rawLogs.length - 1] ? rawLogs : rawLogs.slice(0, -1),\n  )\n\n  return (onMsg) => {\n    const clientId = nextClientId++\n    const logs = allLogs.get(clientId)!\n    const pending = new Queue<string>()\n    let idx = 0\n\n    let transactions = new Map<string, string>()\n    const checkForIncommingMessages = async () => {\n      if (!pending.peek()) return\n\n      while (idx < logs.length && token !== undefined) {\n        const expected = logs[idx]\n        transactions.forEach((value, key) => {\n          expected.msg = expected.msg.replace(key, value)\n        })\n        if (expected.type === OUT) {\n          if (!pending.peek()) {\n            token = setTimeout(checkForIncommingMessages, 100)\n            break\n          }\n\n          const received = pending.pop()\n\n          if (\n            expected.msg.includes(\n              \"TaggedTransactionQueue_validate_transaction\",\n            ) &&\n            received?.includes(\"TaggedTransactionQueue_validate_transaction\")\n          ) {\n            transactions.set(extractTx(expected.msg), extractTx(received))\n            transactions.forEach((value, key) => {\n              expected.msg = expected.msg.replace(key, value)\n            })\n          }\n\n          if (received !== expected.msg) {\n            console.log(`recieved: \"${received}\"`)\n            console.log(`expected: \"${expected.msg}\"`)\n            throw new Error(\"unexpected messaged was received\")\n          }\n        } else {\n          onMsg(expected.msg)\n          await Promise.resolve()\n        }\n        idx++\n      }\n    }\n\n    let token: undefined | number = setTimeout(checkForIncommingMessages, 200)\n\n    return {\n      send: (msg) => {\n        pending.push(msg)\n      },\n      disconnect: () => {\n        clearTimeout(token)\n        token = undefined\n      },\n    }\n  }\n}\n","import { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { IN, OUT } from \"./types\"\n\nexport const withLogsRecorder = (\n  persistLog: (log: string) => void,\n  input: JsonRpcProvider,\n): JsonRpcProvider => {\n  let nextId = 1\n  let token: any\n  let tickDate = \"\"\n  const setTickDate = () => {\n    tickDate = new Date().toISOString()\n    token = setTimeout(setTickDate, 0)\n  }\n\n  return (onMsg) => {\n    const clientId = nextId++\n\n    setTickDate()\n\n    const result = input((msg) => {\n      persistLog(`${clientId}-${tickDate}-${IN}-${msg}`)\n      onMsg(msg)\n    })\n\n    return {\n      ...result,\n      send: (msg) => {\n        persistLog(`${clientId}-${tickDate}-${OUT}-${msg}`)\n        result.send(msg)\n      },\n      disconnect() {\n        clearTimeout(token)\n        result.disconnect()\n      },\n    }\n  }\n}\n"],"mappings":"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","names":[]}