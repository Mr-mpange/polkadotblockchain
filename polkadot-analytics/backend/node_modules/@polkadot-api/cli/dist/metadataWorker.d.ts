import * as _polkadot_api_substrate_bindings from '@polkadot-api/substrate-bindings';
import { JsonRpcProvider } from '@polkadot-api/json-rpc-provider';

type WorkerRequestMessage = {
    id: number;
    potentialRelayChainSpecs: string[];
    chainSpec: string;
};
type WorkerResponseMessage = {
    id: number;
    metadata: MetadataWithRaw;
};
declare function getMetadataFromProvider(provider: JsonRpcProvider): Promise<{
    metadata: {
        lookup: {
            id: number;
            path: string[];
            params: {
                name: string;
                type: number | undefined;
            }[];
            def: {
                tag: "composite";
                value: {
                    name: string | undefined;
                    type: number;
                    typeName: string | undefined;
                    docs: string[];
                }[];
            } | {
                tag: "variant";
                value: {
                    name: string;
                    fields: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                    index: number;
                    docs: string[];
                }[];
            } | {
                tag: "sequence";
                value: number;
            } | {
                tag: "array";
                value: {
                    len: number;
                    type: number;
                };
            } | {
                tag: "tuple";
                value: number[];
            } | {
                tag: "primitive";
                value: {
                    tag: "bool";
                    value: undefined;
                } | {
                    tag: "char";
                    value: undefined;
                } | {
                    tag: "str";
                    value: undefined;
                } | {
                    tag: "u8";
                    value: undefined;
                } | {
                    tag: "u16";
                    value: undefined;
                } | {
                    tag: "u32";
                    value: undefined;
                } | {
                    tag: "u64";
                    value: undefined;
                } | {
                    tag: "u128";
                    value: undefined;
                } | {
                    tag: "u256";
                    value: undefined;
                } | {
                    tag: "i8";
                    value: undefined;
                } | {
                    tag: "i16";
                    value: undefined;
                } | {
                    tag: "i32";
                    value: undefined;
                } | {
                    tag: "i64";
                    value: undefined;
                } | {
                    tag: "i128";
                    value: undefined;
                } | {
                    tag: "i256";
                    value: undefined;
                };
            } | {
                tag: "compact";
                value: number;
            } | {
                tag: "bitSequence";
                value: {
                    bitStoreType: number;
                    bitOrderType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            docs: string[];
            name: string;
            storage: {
                prefix: string;
                items: {
                    name: string;
                    modifier: number;
                    type: {
                        tag: "map";
                        value: {
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        };
                    } | {
                        tag: "plain";
                        value: number;
                    };
                    fallback: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            events: number | undefined;
            constants: {
                name: string;
                type: number;
                value: _polkadot_api_substrate_bindings.HexString;
                docs: string[];
            }[];
            errors: number | undefined;
            index: number;
        }[];
        extrinsic: {
            version: number;
            address: number;
            call: number;
            signature: number;
            extra: number;
            signedExtensions: {
                identifier: string;
                type: number;
                additionalSigned: number;
            }[];
        };
        type: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            call: number;
            event: number;
            error: number;
        };
        custom: [string, {
            type: number;
            value: _polkadot_api_substrate_bindings.HexString;
        }][];
    } | {
        lookup: {
            id: number;
            path: string[];
            params: {
                name: string;
                type: number | undefined;
            }[];
            def: {
                tag: "composite";
                value: {
                    name: string | undefined;
                    type: number;
                    typeName: string | undefined;
                    docs: string[];
                }[];
            } | {
                tag: "variant";
                value: {
                    name: string;
                    fields: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                    index: number;
                    docs: string[];
                }[];
            } | {
                tag: "sequence";
                value: number;
            } | {
                tag: "array";
                value: {
                    len: number;
                    type: number;
                };
            } | {
                tag: "tuple";
                value: number[];
            } | {
                tag: "primitive";
                value: {
                    tag: "bool";
                    value: undefined;
                } | {
                    tag: "char";
                    value: undefined;
                } | {
                    tag: "str";
                    value: undefined;
                } | {
                    tag: "u8";
                    value: undefined;
                } | {
                    tag: "u16";
                    value: undefined;
                } | {
                    tag: "u32";
                    value: undefined;
                } | {
                    tag: "u64";
                    value: undefined;
                } | {
                    tag: "u128";
                    value: undefined;
                } | {
                    tag: "u256";
                    value: undefined;
                } | {
                    tag: "i8";
                    value: undefined;
                } | {
                    tag: "i16";
                    value: undefined;
                } | {
                    tag: "i32";
                    value: undefined;
                } | {
                    tag: "i64";
                    value: undefined;
                } | {
                    tag: "i128";
                    value: undefined;
                } | {
                    tag: "i256";
                    value: undefined;
                };
            } | {
                tag: "compact";
                value: number;
            } | {
                tag: "bitSequence";
                value: {
                    bitStoreType: number;
                    bitOrderType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            docs: string[];
            name: string;
            storage: {
                prefix: string;
                items: {
                    name: string;
                    modifier: number;
                    type: {
                        tag: "map";
                        value: {
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        };
                    } | {
                        tag: "plain";
                        value: number;
                    };
                    fallback: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            events: number | undefined;
            constants: {
                name: string;
                type: number;
                value: _polkadot_api_substrate_bindings.HexString;
                docs: string[];
            }[];
            errors: number | undefined;
            index: number;
        }[];
        extrinsic: {
            type: number;
            version: number;
            signedExtensions: {
                identifier: string;
                type: number;
                additionalSigned: number;
            }[];
        };
        type: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
    };
    metadataRaw: Uint8Array;
}>;
type MetadataWithRaw = Awaited<ReturnType<typeof getMetadataFromProvider>>;

export type { MetadataWithRaw, WorkerRequestMessage, WorkerResponseMessage };
