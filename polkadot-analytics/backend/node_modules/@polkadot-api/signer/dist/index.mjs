// src/from-raw-signer.ts
import {
  Blake2256,
  compact,
  enhanceEncoder,
  metadata as metadataCodec,
  u8
} from "@polkadot-api/substrate-bindings";
import { mergeUint8 } from "@polkadot-api/utils";
var versionCodec = enhanceEncoder(
  u8.enc,
  (value) => +!!value.signed << 7 | value.version
);
var signingTypeId = {
  Ed25519: 0,
  Sr25519: 1,
  Ecdsa: 2
};
function getPolkadotSigner(publicKey, signingType, sign) {
  const polkadotSign = async (callData, signedExtensions, metadata, _, hasher = Blake2256) => {
    let decMeta;
    try {
      const tmpMeta = metadataCodec.dec(metadata);
      if (tmpMeta.metadata.tag !== "v15")
        throw null;
      decMeta = tmpMeta.metadata.value;
    } catch (_2) {
      throw new Error("Unsupported metadata version");
    }
    const { version } = decMeta.extrinsic;
    const extra = [];
    const additionalSigned = [];
    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {
      const signedExtension = signedExtensions[identifier];
      if (!signedExtension)
        throw new Error(`Missing ${identifier} signed extension`);
      extra.push(signedExtension.value);
      additionalSigned.push(signedExtension.additionalSigned);
    });
    const toSign = mergeUint8(callData, ...extra, ...additionalSigned);
    const signed = await sign(toSign.length > 256 ? hasher(toSign) : toSign);
    const preResult = mergeUint8(
      versionCodec({ signed: true, version }),
      // converting it to a `MultiAddress` enum, where the index 0 is `Id(AccountId)`
      new Uint8Array([0, ...publicKey]),
      new Uint8Array([signingTypeId[signingType], ...signed]),
      ...extra,
      callData
    );
    return mergeUint8(compact.enc(preResult.length), preResult);
  };
  return { publicKey, sign: polkadotSign };
}
export {
  getPolkadotSigner
};
//# sourceMappingURL=index.mjs.map