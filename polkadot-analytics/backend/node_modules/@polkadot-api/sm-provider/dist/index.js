"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getSmProvider: () => getSmProvider
});
module.exports = __toCommonJS(src_exports);

// src/sm-provider.ts
var import_json_rpc_provider_proxy = require("@polkadot-api/json-rpc-provider-proxy");
var pending;
var getSmProvider = (chain) => (0, import_json_rpc_provider_proxy.getSyncProvider)(async () => {
  while (pending)
    await pending;
  let resolvedChain;
  if (chain instanceof Promise) {
    pending = chain;
    resolvedChain = await chain;
    pending = null;
  } else
    resolvedChain = chain;
  return (listener, onError) => {
    let listening = true;
    (async () => {
      do {
        let message = "";
        try {
          message = await resolvedChain.nextJsonRpcResponse();
        } catch (e) {
          if (listening)
            onError();
          return;
        }
        if (!listening)
          break;
        listener(message);
      } while (listening);
    })();
    return {
      send(msg) {
        resolvedChain.sendJsonRpc(msg);
      },
      disconnect() {
        listening = false;
        resolvedChain.remove();
      }
    };
  };
});
//# sourceMappingURL=index.js.map