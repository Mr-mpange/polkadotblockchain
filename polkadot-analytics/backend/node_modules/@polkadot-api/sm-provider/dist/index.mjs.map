{"version":3,"sources":["../src/sm-provider.ts"],"sourcesContent":["import type { Chain } from \"smoldot\"\nimport type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\n\nlet pending: Promise<Chain> | null\n\nexport const getSmProvider = (chain: Chain | Promise<Chain>): JsonRpcProvider =>\n  getSyncProvider(async () => {\n    while (pending) await pending\n\n    let resolvedChain: Chain\n    if (chain instanceof Promise) {\n      pending = chain\n      resolvedChain = await chain\n      pending = null\n    } else resolvedChain = chain\n\n    return (listener, onError) => {\n      let listening = true\n      ;(async () => {\n        do {\n          let message = \"\"\n          try {\n            message = await resolvedChain.nextJsonRpcResponse()\n          } catch (e) {\n            if (listening) onError()\n            return\n          }\n          if (!listening) break\n          listener(message)\n        } while (listening)\n      })()\n\n      return {\n        send(msg: string) {\n          resolvedChain.sendJsonRpc(msg)\n        },\n        disconnect() {\n          listening = false\n          resolvedChain.remove()\n        },\n      }\n    }\n  })\n"],"mappings":";AAEA,SAAS,uBAAuB;AAEhC,IAAI;AAEG,IAAM,gBAAgB,CAAC,UAC5B,gBAAgB,YAAY;AAC1B,SAAO;AAAS,UAAM;AAEtB,MAAI;AACJ,MAAI,iBAAiB,SAAS;AAC5B,cAAU;AACV,oBAAgB,MAAM;AACtB,cAAU;AAAA,EACZ;AAAO,oBAAgB;AAEvB,SAAO,CAAC,UAAU,YAAY;AAC5B,QAAI,YAAY;AACf,KAAC,YAAY;AACZ,SAAG;AACD,YAAI,UAAU;AACd,YAAI;AACF,oBAAU,MAAM,cAAc,oBAAoB;AAAA,QACpD,SAAS,GAAG;AACV,cAAI;AAAW,oBAAQ;AACvB;AAAA,QACF;AACA,YAAI,CAAC;AAAW;AAChB,iBAAS,OAAO;AAAA,MAClB,SAAS;AAAA,IACX,GAAG;AAEH,WAAO;AAAA,MACL,KAAK,KAAa;AAChB,sBAAc,YAAY,GAAG;AAAA,MAC/B;AAAA,MACA,aAAa;AACX,oBAAY;AACZ,sBAAc,OAAO;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AACF,CAAC;","names":[]}