// src/sm-provider.ts
import { getSyncProvider } from "@polkadot-api/json-rpc-provider-proxy";
var pending;
var getSmProvider = (chain) => getSyncProvider(async () => {
  while (pending)
    await pending;
  let resolvedChain;
  if (chain instanceof Promise) {
    pending = chain;
    resolvedChain = await chain;
    pending = null;
  } else
    resolvedChain = chain;
  return (listener, onError) => {
    let listening = true;
    (async () => {
      do {
        let message = "";
        try {
          message = await resolvedChain.nextJsonRpcResponse();
        } catch (e) {
          if (listening)
            onError();
          return;
        }
        if (!listening)
          break;
        listener(message);
      } while (listening);
    })();
    return {
      send(msg) {
        resolvedChain.sendJsonRpc(msg);
      },
      disconnect() {
        listening = false;
        resolvedChain.remove();
      }
    };
  };
});
export {
  getSmProvider
};
//# sourceMappingURL=index.mjs.map