{"version":3,"sources":["../../../src/web.ts","../../../src/ws-provider.ts"],"sourcesContent":["import { getWebSocketProvider } from \"./ws-provider\"\n\nexport type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nexport const WebSocketProvider = getWebSocketProvider(WebSocket)\n","import type { JsonRpcProvider } from \"@polkadot-api/json-rpc-provider\"\nimport { getSyncProvider } from \"@polkadot-api/json-rpc-provider-proxy\"\n\nexport const getWebSocketProvider =\n  (WebsocketClass: typeof WebSocket) =>\n  (uri: string, protocols?: string | string[]): JsonRpcProvider =>\n    getSyncProvider(async () => {\n      const socket = new WebsocketClass(uri, protocols)\n\n      await new Promise<void>((resolve, reject) => {\n        const onOpen = () => {\n          resolve()\n          socket.removeEventListener(\"error\", onError)\n        }\n        socket.addEventListener(\"open\", onOpen, { once: true })\n\n        const onError = (e: Event) => {\n          console.error(\n            `Unable to connect to ${uri}${\n              protocols ? \", protocols: \" + protocols : \"\"\n            }`,\n          )\n          reject(e)\n          socket.removeEventListener(\"open\", onOpen)\n        }\n        socket.addEventListener(\"error\", onError, { once: true })\n      })\n\n      return (onMessage, onHalt) => {\n        const _onMessage = (e: MessageEvent) => {\n          if (typeof e.data === \"string\") onMessage(e.data)\n        }\n\n        socket.addEventListener(\"message\", _onMessage)\n        socket.addEventListener(\"error\", onHalt)\n        socket.addEventListener(\"close\", onHalt)\n\n        return {\n          send: (msg) => {\n            socket.send(msg)\n          },\n          disconnect: () => {\n            socket.removeEventListener(\"message\", _onMessage)\n            socket.removeEventListener(\"error\", onHalt)\n            socket.removeEventListener(\"close\", onHalt)\n            socket.close()\n          },\n        }\n      }\n    })\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,uBAAAE,IAAA,eAAAC,EAAAH,GCCA,IAAAI,EAAgC,iDAEnBC,EACVC,GACD,CAACC,EAAaC,OACZ,mBAAgB,SAAY,CAC1B,IAAMC,EAAS,IAAIH,EAAeC,EAAKC,CAAS,EAEhD,aAAM,IAAI,QAAc,CAACE,EAASC,IAAW,CAC3C,IAAMC,EAAS,IAAM,CACnBF,EAAQ,EACRD,EAAO,oBAAoB,QAASI,CAAO,CAC7C,EACAJ,EAAO,iBAAiB,OAAQG,EAAQ,CAAE,KAAM,EAAK,CAAC,EAEtD,IAAMC,EAAWC,GAAa,CAC5B,QAAQ,MACN,wBAAwBP,CAAG,GACzBC,EAAY,gBAAkBA,EAAY,EAC5C,EACF,EACAG,EAAOG,CAAC,EACRL,EAAO,oBAAoB,OAAQG,CAAM,CAC3C,EACAH,EAAO,iBAAiB,QAASI,EAAS,CAAE,KAAM,EAAK,CAAC,CAC1D,CAAC,EAEM,CAACE,EAAWC,IAAW,CAC5B,IAAMC,EAAcH,GAAoB,CAClC,OAAOA,EAAE,MAAS,UAAUC,EAAUD,EAAE,IAAI,CAClD,EAEA,OAAAL,EAAO,iBAAiB,UAAWQ,CAAU,EAC7CR,EAAO,iBAAiB,QAASO,CAAM,EACvCP,EAAO,iBAAiB,QAASO,CAAM,EAEhC,CACL,KAAOE,GAAQ,CACbT,EAAO,KAAKS,CAAG,CACjB,EACA,WAAY,IAAM,CAChBT,EAAO,oBAAoB,UAAWQ,CAAU,EAChDR,EAAO,oBAAoB,QAASO,CAAM,EAC1CP,EAAO,oBAAoB,QAASO,CAAM,EAC1CP,EAAO,MAAM,CACf,CACF,CACF,CACF,CAAC,ED9CE,IAAMU,EAAoBC,EAAqB,SAAS","names":["web_exports","__export","WebSocketProvider","__toCommonJS","import_json_rpc_provider_proxy","getWebSocketProvider","WebsocketClass","uri","protocols","socket","resolve","reject","onOpen","onError","e","onMessage","onHalt","_onMessage","msg","WebSocketProvider","getWebSocketProvider"]}