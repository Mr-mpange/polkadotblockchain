"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/node.ts
var node_exports = {};
__export(node_exports, {
  WebSocketProvider: () => WebSocketProvider
});
module.exports = __toCommonJS(node_exports);
var import_ws = require("ws");

// src/ws-provider.ts
var import_json_rpc_provider_proxy = require("@polkadot-api/json-rpc-provider-proxy");
var getWebSocketProvider = (WebsocketClass) => (uri, protocols) => (0, import_json_rpc_provider_proxy.getSyncProvider)(async () => {
  const socket = new WebsocketClass(uri, protocols);
  await new Promise((resolve, reject) => {
    const onOpen = () => {
      resolve();
      socket.removeEventListener("error", onError);
    };
    socket.addEventListener("open", onOpen, { once: true });
    const onError = (e) => {
      console.error(
        `Unable to connect to ${uri}${protocols ? ", protocols: " + protocols : ""}`
      );
      reject(e);
      socket.removeEventListener("open", onOpen);
    };
    socket.addEventListener("error", onError, { once: true });
  });
  return (onMessage, onHalt) => {
    const _onMessage = (e) => {
      if (typeof e.data === "string")
        onMessage(e.data);
    };
    socket.addEventListener("message", _onMessage);
    socket.addEventListener("error", onHalt);
    socket.addEventListener("close", onHalt);
    return {
      send: (msg) => {
        socket.send(msg);
      },
      disconnect: () => {
        socket.removeEventListener("message", _onMessage);
        socket.removeEventListener("error", onHalt);
        socket.removeEventListener("close", onHalt);
        socket.close();
      }
    };
  };
});

// src/node.ts
var WS = class extends import_ws.WebSocket {
  close() {
    ;
    this.terminate();
  }
};
var WebSocketProvider = getWebSocketProvider(WS);
//# sourceMappingURL=node.js.map