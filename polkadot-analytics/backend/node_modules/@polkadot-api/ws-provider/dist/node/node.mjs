// src/node.ts
import { WebSocket } from "ws";

// src/ws-provider.ts
import { getSyncProvider } from "@polkadot-api/json-rpc-provider-proxy";
var getWebSocketProvider = (WebsocketClass) => (uri, protocols) => getSyncProvider(async () => {
  const socket = new WebsocketClass(uri, protocols);
  await new Promise((resolve, reject) => {
    const onOpen = () => {
      resolve();
      socket.removeEventListener("error", onError);
    };
    socket.addEventListener("open", onOpen, { once: true });
    const onError = (e) => {
      console.error(
        `Unable to connect to ${uri}${protocols ? ", protocols: " + protocols : ""}`
      );
      reject(e);
      socket.removeEventListener("open", onOpen);
    };
    socket.addEventListener("error", onError, { once: true });
  });
  return (onMessage, onHalt) => {
    const _onMessage = (e) => {
      if (typeof e.data === "string")
        onMessage(e.data);
    };
    socket.addEventListener("message", _onMessage);
    socket.addEventListener("error", onHalt);
    socket.addEventListener("close", onHalt);
    return {
      send: (msg) => {
        socket.send(msg);
      },
      disconnect: () => {
        socket.removeEventListener("message", _onMessage);
        socket.removeEventListener("error", onHalt);
        socket.removeEventListener("close", onHalt);
        socket.close();
      }
    };
  };
});

// src/node.ts
var WS = class extends WebSocket {
  close() {
    ;
    this.terminate();
  }
};
var WebSocketProvider = getWebSocketProvider(WS);
export {
  WebSocketProvider
};
//# sourceMappingURL=node.mjs.map