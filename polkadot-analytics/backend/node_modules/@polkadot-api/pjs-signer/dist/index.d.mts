import { PolkadotSigner } from '@polkadot-api/polkadot-signer';
export { PolkadotSigner } from '@polkadot-api/polkadot-signer';

type HexString = string;
interface SignerPayloadJSON {
    /**
     * The ss-58 encoded address.
     */
    address: string;
    /**
     * The id of the asset used to pay fees, in hex.
     */
    assetId?: number | object;
    /**
     * The checkpoint hash of the block, in hex.
     */
    blockHash: HexString;
    /**
     * The checkpoint block number, in hex.
     */
    blockNumber: HexString;
    /**
     * The era for this transaction, in hex.
     */
    era: HexString;
    /**
     * The genesis hash of the chain, in hex.
     */
    genesisHash: HexString;
    /**
     * The metadataHash for the CheckMetadataHash SignedExtension, as hex.
     */
    metadataHash?: HexString;
    /**
     * The encoded method (with arguments) in hex.
     */
    method: string;
    /**
     * The mode for the CheckMetadataHash SignedExtension, in hex.
     */
    mode?: number;
    /**
     * The nonce for this transaction, in hex.
     */
    nonce: HexString;
    /**
     * The current spec version for the runtime.
     */
    specVersion: HexString;
    /**
     * The tip for this transaction, in hex.
     */
    tip: HexString;
    /**
     * The current transaction version for the runtime.
     */
    transactionVersion: HexString;
    /**
     * The applicable signed extensions for this runtime.
     */
    signedExtensions: string[];
    /**
     * The version of the extrinsic we are dealing with.
     */
    version: number;
}

declare global {
    interface Window {
        injectedWeb3?: InjectedWeb3;
    }
}
type InjectedWeb3 = Record<string, {
    enable: () => Promise<PjsInjectedExtension>;
} | undefined>;
type KeypairType = "ed25519" | "sr25519" | "ecdsa";
interface InjectedPolkadotAccount {
    polkadotSigner: PolkadotSigner;
    address: string;
    genesisHash?: string | null;
    name?: string;
    type?: KeypairType;
}
interface PjsInjectedExtension {
    signer: {
        signPayload: (payload: SignerPayloadJSON) => Promise<{
            signature: string;
        }>;
    };
    accounts: {
        get: () => Promise<InjectedPolkadotAccount[]>;
        subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => () => void;
    };
}
interface InjectedExtension {
    name: string;
    getAccounts: () => InjectedPolkadotAccount[];
    subscribe: (cb: (accounts: InjectedPolkadotAccount[]) => void) => () => void;
    disconnect: () => void;
}
declare const connectInjectedExtension: (name: string) => Promise<InjectedExtension>;
declare const getInjectedExtensions: () => null | Array<string>;

export { type InjectedExtension, type InjectedPolkadotAccount, type InjectedWeb3, type KeypairType, connectInjectedExtension, getInjectedExtensions };
