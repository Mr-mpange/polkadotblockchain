var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/injected-extensions.ts
import { AccountId as AccountId2 } from "@polkadot-api/substrate-bindings";

// src/from-pjs-account.ts
import {
  AccountId,
  Blake2256,
  compact as compact2,
  enhanceEncoder,
  metadata as metadataCodec,
  u8
} from "@polkadot-api/substrate-bindings";
import { fromHex, mergeUint8, toHex as toHex2 } from "@polkadot-api/utils";
import { getDynamicBuilder } from "@polkadot-api/metadata-builders";

// src/pjs-signed-extensions-mappers.ts
var pjs_signed_extensions_mappers_exports = {};
__export(pjs_signed_extensions_mappers_exports, {
  ChargeAssetTxPayment: () => ChargeAssetTxPayment,
  ChargeTransactionPayment: () => ChargeTransactionPayment,
  CheckGenesis: () => CheckGenesis,
  CheckMetadataHash: () => CheckMetadataHash,
  CheckMortality: () => CheckMortality,
  CheckNonce: () => CheckNonce,
  CheckSpecVersion: () => CheckSpecVersion,
  CheckTxVersion: () => CheckTxVersion
});
import {
  Bytes,
  Struct,
  compact,
  u32,
  Option,
  compactBn
} from "@polkadot-api/substrate-bindings";
import { toHex } from "@polkadot-api/utils";
var toPjsHex = (value, minByteLen) => {
  let inner = value.toString(16);
  inner = (inner.length % 2 ? "0" : "") + inner;
  const nPaddedBytes = Math.max(0, (minByteLen || 0) - inner.length / 2);
  return "0x" + "00".repeat(nPaddedBytes) + inner;
};
var CheckGenesis = ({
  additionalSigned
}) => ({
  genesisHash: toHex(additionalSigned)
});
var CheckNonce = ({
  value
}) => {
  return { nonce: toPjsHex(compact.dec(value), 4) };
};
var CheckTxVersion = ({
  additionalSigned
}) => {
  return { transactionVersion: toPjsHex(u32.dec(additionalSigned), 4) };
};
var assetTxPaymentDec = Struct({
  tip: compact,
  asset: Option(Bytes(Infinity))
}).dec;
var ChargeAssetTxPayment = ({
  value
}) => {
  const { tip, asset } = assetTxPaymentDec(value);
  return {
    ...asset ? { assetId: toHex(asset) } : {},
    tip: toPjsHex(tip, 16)
  };
};
var ChargeTransactionPayment = ({
  value
}) => ({
  tip: toPjsHex(compactBn.dec(value), 16)
  // u128 => 16 bytes
});
var CheckMortality = ({ value, additionalSigned }, blockNumber) => ({
  era: toHex(value),
  blockHash: toHex(additionalSigned),
  blockNumber: toPjsHex(blockNumber, 4)
});
var CheckSpecVersion = ({
  additionalSigned
}) => ({
  specVersion: toPjsHex(u32.dec(additionalSigned), 4)
});
var CheckMetadataHash = () => ({});

// src/from-pjs-account.ts
var getAddressFormat = (metadata) => {
  const dynamicBuilder = getDynamicBuilder(metadata);
  const constant = metadata.pallets.find((x) => x.name === "System").constants.find((s) => s.name === "SS58Prefix");
  return dynamicBuilder.buildDefinition(constant.type).dec(constant.value);
};
var versionCodec = enhanceEncoder(
  u8.enc,
  (value) => +!!value.signed << 7 | value.version
);
function getPolkadotSignerFromPjs(publicKey, signPayload) {
  const sign = async (callData, signedExtensions, metadata, atBlockNumber, _ = Blake2256) => {
    let decMeta;
    try {
      const tmpMeta = metadataCodec.dec(metadata);
      if (tmpMeta.metadata.tag !== "v15")
        throw null;
      decMeta = tmpMeta.metadata.value;
    } catch (_2) {
      throw new Error("Unsupported metadata version");
    }
    const pjs = {};
    pjs.signedExtensions = [];
    const { version } = decMeta.extrinsic;
    const extra = [];
    decMeta.extrinsic.signedExtensions.map(({ identifier }) => {
      const signedExtension = signedExtensions[identifier];
      if (!signedExtension)
        throw new Error(`Missing ${identifier} signed-extension`);
      extra.push(signedExtension.value);
      pjs.signedExtensions.push(identifier);
      if (!pjs_signed_extensions_mappers_exports[identifier]) {
        if (signedExtension.value.length === 0 && signedExtension.additionalSigned.length === 0)
          return;
        throw new Error(
          `PJS does not support this signed-extension: ${identifier}`
        );
      }
      Object.assign(
        pjs,
        pjs_signed_extensions_mappers_exports[identifier](
          signedExtension,
          atBlockNumber
        )
      );
    });
    pjs.address = AccountId(getAddressFormat(decMeta)).dec(publicKey);
    pjs.method = toHex2(callData);
    pjs.version = version;
    const result = await signPayload(pjs);
    const preResult = mergeUint8(
      versionCodec({ signed: true, version }),
      // converting it to a `MultiAddress` enum, where the index 0 is `Id(AccountId)`
      new Uint8Array([0, ...publicKey]),
      fromHex(result.signature),
      ...extra,
      callData
    );
    return mergeUint8(compact2.enc(preResult.length), preResult);
  };
  return { publicKey, sign };
}

// src/injected-extensions.ts
var supportedAccountTypes = /* @__PURE__ */ new Set([
  "ed25519",
  "sr25519",
  "ecdsa"
]);
var getPublicKey = AccountId2().enc;
var connectInjectedExtension = async (name) => {
  let entry = window.injectedWeb3?.[name];
  if (!entry)
    throw new Error(`Unavailable extension: "${name}"`);
  const enabledExtension = await entry.enable();
  const signPayload = enabledExtension.signer.signPayload.bind(
    enabledExtension.signer
  );
  const toPolkadotInjected = (accounts) => accounts.filter(({ type }) => supportedAccountTypes.has(type)).map((x) => {
    const polkadotSigner = getPolkadotSignerFromPjs(
      getPublicKey(x.address),
      signPayload
    );
    return {
      ...x,
      polkadotSigner
    };
  });
  let currentAccounts = toPolkadotInjected(
    await enabledExtension.accounts.get()
  );
  const listeners = /* @__PURE__ */ new Set();
  const stop = enabledExtension.accounts.subscribe((x) => {
    currentAccounts = toPolkadotInjected(x);
    listeners.forEach((cb) => {
      cb(currentAccounts);
    });
  });
  return {
    name,
    getAccounts: () => currentAccounts,
    subscribe: (cb) => {
      listeners.add(cb);
      return () => {
        listeners.delete(cb);
      };
    },
    disconnect: () => {
      stop();
    }
  };
};
var getInjectedExtensions = () => {
  const { injectedWeb3 } = window;
  return injectedWeb3 ? Object.keys(injectedWeb3) : null;
};
export {
  connectInjectedExtension,
  getInjectedExtensions
};
//# sourceMappingURL=index.mjs.map